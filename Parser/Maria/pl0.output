Nonterminals useless in grammar

    block
    constDecls
    varDecls
    varDecl
    idents
    procDecls
    empty
    constDecl
    constDef
    constDefs
    procDecl
    stmt
    assignStmt
    callStmt
    beginStmt
    ifStmt
    whileStmt
    readStmt
    writeStmt
    stmts
    condition
    oddCondition
    relOpCondition
    relOp
    term
    factor
    posSign


Terminals unused in grammar

    identsym
    numbersym
    "+"
    "-"
    "*"
    "/"
    "."
    ";"
    "="
    ","
    ":="
    "const"
    "var"
    "procedure"
    "call"
    "begin"
    "end"
    "if"
    "then"
    "else"
    "while"
    "do"
    "read"
    "write"
    "odd"
    "<>"
    "<"
    "<="
    ">"
    ">="
    "("
    ")"


Grammar

    0 $accept: program $end

    1 program: expr

    2 expr: skipStmt
    3     | %empty

    4 skipStmt: "skip"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258)
    numbersym <number> (259)
    "+" <token> (260)
    "-" <token> (261)
    "*" <token> (262)
    "/" <token> (263)
    "." <token> (264)
    ";" <token> (265)
    "=" <token> (266)
    "," <token> (267)
    ":=" <token> (268)
    "const" <token> (269)
    "var" <token> (270)
    "procedure" <token> (271)
    "call" <token> (272)
    "begin" <token> (273)
    "end" <token> (274)
    "if" <token> (275)
    "then" <token> (276)
    "else" <token> (277)
    "while" <token> (278)
    "do" <token> (279)
    "read" <token> (280)
    "write" <token> (281)
    "skip" <token> (282) 4
    "odd" <token> (283)
    "<>" <token> (284)
    "<" <token> (285)
    "<=" <token> (286)
    ">" <token> (287)
    ">=" <token> (288)
    "(" <token> (289)
    ")" <token> (290)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    expr <expr> (38)
        on left: 2 3
        on right: 1
    skipStmt <skip_stmt> (39)
        on left: 4
        on right: 2


State 0

    0 $accept: . program $end

    "skip"  shift, and go to state 1

    $default  reduce using rule 3 (expr)

    program   go to state 2
    expr      go to state 3
    skipStmt  go to state 4


State 1

    4 skipStmt: "skip" .

    $default  reduce using rule 4 (skipStmt)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: expr .

    $default  reduce using rule 1 (program)


State 4

    2 expr: skipStmt .

    $default  reduce using rule 2 (expr)


State 5

    0 $accept: program $end .

    $default  accept
