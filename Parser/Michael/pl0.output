Terminals unused in grammar

    ","
    "const"
    "var"


State 3 conflicts: 1 shift/reduce
State 8 conflicts: 1 shift/reduce
State 13 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 59 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: constDecls constDecl
    4           | empty

    5 varDecls: varDecls varDecl
    6         | empty

    7 varDecl: idents

    8 idents: identsym
    9       | idents identsym

   10 procDecls: procDecls procDecl
   11          | empty

   12 empty: ε

   13 constDecl: constDefs

   14 constDef: idents "=" numbersym

   15 constDefs: constDef
   16          | constDefs constDef

   17 procDecl: "procedure" idents ";" block

   18 stmt: assignStmt
   19     | callStmt
   20     | beginStmt
   21     | ifStmt
   22     | whileStmt
   23     | readStmt
   24     | writeStmt
   25     | skipStmt

   26 assignStmt: idents ":=" expr

   27 callStmt: "call" idents

   28 beginStmt: "begin" stmts "end"

   29 ifStmt: "if" condition "then" stmt "else" stmt

   30 whileStmt: "while" condition "do" stmt

   31 readStmt: "read" idents

   32 writeStmt: "write" expr

   33 skipStmt: "skip"

   34 stmts: stmt
   35      | stmts ";" stmt

   36 condition: oddCondition
   37          | relOpCondition

   38 oddCondition: "odd" expr

   39 relOpCondition: expr relOp expr

   40 relOp: "="
   41      | "<>"
   42      | "<"
   43      | "<="
   44      | ">"
   45      | ">="

   46 expr: term
   47     | expr "+" term
   48     | expr "-" term

   49 term: factor
   50     | term "*" factor
   51     | term "/" factor

   52 factor: idents
   53       | posSign numbersym
   54       | "(" expr ")"

   55 posSign: "+"
   56        | "-"
   57        | empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 8 9
    numbersym <number> (259) 14 53
    "+" <token> (260) 47 55
    "-" <token> (261) 48 56
    "*" <token> (262) 50
    "/" <token> (263) 51
    "." <token> (264) 1
    ";" <token> (265) 17 35
    "=" <token> (266) 14 40
    "," <token> (267)
    ":=" <token> (268) 26
    "const" <token> (269)
    "var" <token> (270)
    "procedure" <token> (271) 17
    "call" <token> (272) 27
    "begin" <token> (273) 28
    "end" <token> (274) 28
    "if" <token> (275) 29
    "then" <token> (276) 29
    "else" <token> (277) 29
    "while" <token> (278) 30
    "do" <token> (279) 30
    "read" <token> (280) 31
    "write" <token> (281) 32
    "skip" <token> (282) 33
    "odd" <token> (283) 38
    "<>" <token> (284) 41
    "<" <token> (285) 42
    "<=" <token> (286) 43
    ">" <token> (287) 44
    ">=" <token> (288) 45
    "(" <token> (289) 54
    ")" <token> (290) 54


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 17
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2 3
    varDecls <var_decls> (40)
        on left: 5 6
        on right: 2 5
    varDecl <var_decl> (41)
        on left: 7
        on right: 5
    idents <idents> (42)
        on left: 8 9
        on right: 7 9 14 17 26 27 31 52
    procDecls <proc_decls> (43)
        on left: 10 11
        on right: 2 10
    empty <empty> (44)
        on left: 12
        on right: 4 6 11 57
    constDecl <const_decl> (45)
        on left: 13
        on right: 3
    constDef <const_def> (46)
        on left: 14
        on right: 15 16
    constDefs <const_defs> (47)
        on left: 15 16
        on right: 13 16
    procDecl <proc_decl> (48)
        on left: 17
        on right: 10
    stmt <stmt> (49)
        on left: 18 19 20 21 22 23 24 25
        on right: 2 29 30 34 35
    assignStmt <assign_stmt> (50)
        on left: 26
        on right: 18
    callStmt <call_stmt> (51)
        on left: 27
        on right: 19
    beginStmt <begin_stmt> (52)
        on left: 28
        on right: 20
    ifStmt <if_stmt> (53)
        on left: 29
        on right: 21
    whileStmt <while_stmt> (54)
        on left: 30
        on right: 22
    readStmt <read_stmt> (55)
        on left: 31
        on right: 23
    writeStmt <write_stmt> (56)
        on left: 32
        on right: 24
    skipStmt <skip_stmt> (57)
        on left: 33
        on right: 25
    stmts <stmts> (58)
        on left: 34 35
        on right: 28 35
    condition <condition> (59)
        on left: 36 37
        on right: 29 30
    oddCondition <odd_condition> (60)
        on left: 38
        on right: 36
    relOpCondition <rel_op_condition> (61)
        on left: 39
        on right: 37
    relOp <token> (62)
        on left: 40 41 42 43 44 45
        on right: 39
    expr <expr> (63)
        on left: 46 47 48
        on right: 26 32 38 39 47 48 54
    term <expr> (64)
        on left: 49 50 51
        on right: 46 47 48 50 51
    factor <expr> (65)
        on left: 52 53 54
        on right: 49 50 51
    posSign <token> (66)
        on left: 55 56 57
        on right: 53


State 0

    0 $accept: • program $end

    $default  reduce using rule 12 (empty)

    program     go to state 1
    block       go to state 2
    constDecls  go to state 3
    empty       go to state 4


State 1

    0 $accept: program • $end

    $end  shift, and go to state 5


State 2

    1 program: block • "."

    "."  shift, and go to state 6


State 3

    2 block: constDecls • varDecls procDecls stmt
    3 constDecls: constDecls • constDecl

    identsym  shift, and go to state 7

    identsym  [reduce using rule 12 (empty)]
    $default  reduce using rule 12 (empty)

    varDecls   go to state 8
    idents     go to state 9
    empty      go to state 10
    constDecl  go to state 11
    constDef   go to state 12
    constDefs  go to state 13


State 4

    4 constDecls: empty •

    $default  reduce using rule 4 (constDecls)


State 5

    0 $accept: program $end •

    $default  accept


State 6

    1 program: block "." •

    $default  reduce using rule 1 (program)


State 7

    8 idents: identsym •

    $default  reduce using rule 8 (idents)


State 8

    2 block: constDecls varDecls • procDecls stmt
    5 varDecls: varDecls • varDecl

    identsym  shift, and go to state 7

    identsym  [reduce using rule 12 (empty)]
    $default  reduce using rule 12 (empty)

    varDecl    go to state 14
    idents     go to state 15
    procDecls  go to state 16
    empty      go to state 17


State 9

    9 idents: idents • identsym
   14 constDef: idents • "=" numbersym

    identsym  shift, and go to state 18
    "="       shift, and go to state 19


State 10

    6 varDecls: empty •

    $default  reduce using rule 6 (varDecls)


State 11

    3 constDecls: constDecls constDecl •

    $default  reduce using rule 3 (constDecls)


State 12

   15 constDefs: constDef •

    $default  reduce using rule 15 (constDefs)


State 13

   13 constDecl: constDefs •
   16 constDefs: constDefs • constDef

    identsym  shift, and go to state 7

    identsym  [reduce using rule 13 (constDecl)]
    $default  reduce using rule 13 (constDecl)

    idents    go to state 9
    constDef  go to state 20


State 14

    5 varDecls: varDecls varDecl •

    $default  reduce using rule 5 (varDecls)


State 15

    7 varDecl: idents •
    9 idents: idents • identsym

    identsym  shift, and go to state 18

    identsym  [reduce using rule 7 (varDecl)]
    $default  reduce using rule 7 (varDecl)


State 16

    2 block: constDecls varDecls procDecls • stmt
   10 procDecls: procDecls • procDecl

    identsym     shift, and go to state 7
    "procedure"  shift, and go to state 21
    "call"       shift, and go to state 22
    "begin"      shift, and go to state 23
    "if"         shift, and go to state 24
    "while"      shift, and go to state 25
    "read"       shift, and go to state 26
    "write"      shift, and go to state 27
    "skip"       shift, and go to state 28

    idents      go to state 29
    procDecl    go to state 30
    stmt        go to state 31
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 17

   11 procDecls: empty •

    $default  reduce using rule 11 (procDecls)


State 18

    9 idents: idents identsym •

    $default  reduce using rule 9 (idents)


State 19

   14 constDef: idents "=" • numbersym

    numbersym  shift, and go to state 40


State 20

   16 constDefs: constDefs constDef •

    $default  reduce using rule 16 (constDefs)


State 21

   17 procDecl: "procedure" • idents ";" block

    identsym  shift, and go to state 7

    idents  go to state 41


State 22

   27 callStmt: "call" • idents

    identsym  shift, and go to state 7

    idents  go to state 42


State 23

   28 beginStmt: "begin" • stmts "end"

    identsym  shift, and go to state 7
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "if"      shift, and go to state 24
    "while"   shift, and go to state 25
    "read"    shift, and go to state 26
    "write"   shift, and go to state 27
    "skip"    shift, and go to state 28

    idents      go to state 29
    stmt        go to state 43
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39
    stmts       go to state 44


State 24

   29 ifStmt: "if" • condition "then" stmt "else" stmt

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "odd"     shift, and go to state 47
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents          go to state 49
    empty           go to state 50
    condition       go to state 51
    oddCondition    go to state 52
    relOpCondition  go to state 53
    expr            go to state 54
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 25

   30 whileStmt: "while" • condition "do" stmt

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "odd"     shift, and go to state 47
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents          go to state 49
    empty           go to state 50
    condition       go to state 58
    oddCondition    go to state 52
    relOpCondition  go to state 53
    expr            go to state 54
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 26

   31 readStmt: "read" • idents

    identsym  shift, and go to state 7

    idents  go to state 59


State 27

   32 writeStmt: "write" • expr

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    expr     go to state 60
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 28

   33 skipStmt: "skip" •

    $default  reduce using rule 33 (skipStmt)


State 29

    9 idents: idents • identsym
   26 assignStmt: idents • ":=" expr

    identsym  shift, and go to state 18
    ":="      shift, and go to state 61


State 30

   10 procDecls: procDecls procDecl •

    $default  reduce using rule 10 (procDecls)


State 31

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 32

   18 stmt: assignStmt •

    $default  reduce using rule 18 (stmt)


State 33

   19 stmt: callStmt •

    $default  reduce using rule 19 (stmt)


State 34

   20 stmt: beginStmt •

    $default  reduce using rule 20 (stmt)


State 35

   21 stmt: ifStmt •

    $default  reduce using rule 21 (stmt)


State 36

   22 stmt: whileStmt •

    $default  reduce using rule 22 (stmt)


State 37

   23 stmt: readStmt •

    $default  reduce using rule 23 (stmt)


State 38

   24 stmt: writeStmt •

    $default  reduce using rule 24 (stmt)


State 39

   25 stmt: skipStmt •

    $default  reduce using rule 25 (stmt)


State 40

   14 constDef: idents "=" numbersym •

    $default  reduce using rule 14 (constDef)


State 41

    9 idents: idents • identsym
   17 procDecl: "procedure" idents • ";" block

    identsym  shift, and go to state 18
    ";"       shift, and go to state 62


State 42

    9 idents: idents • identsym
   27 callStmt: "call" idents •

    identsym  shift, and go to state 18

    identsym  [reduce using rule 27 (callStmt)]
    $default  reduce using rule 27 (callStmt)


State 43

   34 stmts: stmt •

    $default  reduce using rule 34 (stmts)


State 44

   28 beginStmt: "begin" stmts • "end"
   35 stmts: stmts • ";" stmt

    ";"    shift, and go to state 63
    "end"  shift, and go to state 64


State 45

   55 posSign: "+" •

    $default  reduce using rule 55 (posSign)


State 46

   56 posSign: "-" •

    $default  reduce using rule 56 (posSign)


State 47

   38 oddCondition: "odd" • expr

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    expr     go to state 65
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 48

   54 factor: "(" • expr ")"

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    expr     go to state 66
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 49

    9 idents: idents • identsym
   52 factor: idents •

    identsym  shift, and go to state 18

    identsym  [reduce using rule 52 (factor)]
    $default  reduce using rule 52 (factor)


State 50

   57 posSign: empty •

    $default  reduce using rule 57 (posSign)


State 51

   29 ifStmt: "if" condition • "then" stmt "else" stmt

    "then"  shift, and go to state 67


State 52

   36 condition: oddCondition •

    $default  reduce using rule 36 (condition)


State 53

   37 condition: relOpCondition •

    $default  reduce using rule 37 (condition)


State 54

   39 relOpCondition: expr • relOp expr
   47 expr: expr • "+" term
   48     | expr • "-" term

    "+"   shift, and go to state 68
    "-"   shift, and go to state 69
    "="   shift, and go to state 70
    "<>"  shift, and go to state 71
    "<"   shift, and go to state 72
    "<="  shift, and go to state 73
    ">"   shift, and go to state 74
    ">="  shift, and go to state 75

    relOp  go to state 76


State 55

   46 expr: term •
   50 term: term • "*" factor
   51     | term • "/" factor

    "*"  shift, and go to state 77
    "/"  shift, and go to state 78

    $default  reduce using rule 46 (expr)


State 56

   49 term: factor •

    $default  reduce using rule 49 (term)


State 57

   53 factor: posSign • numbersym

    numbersym  shift, and go to state 79


State 58

   30 whileStmt: "while" condition • "do" stmt

    "do"  shift, and go to state 80


State 59

    9 idents: idents • identsym
   31 readStmt: "read" idents •

    identsym  shift, and go to state 18

    identsym  [reduce using rule 31 (readStmt)]
    $default  reduce using rule 31 (readStmt)


State 60

   32 writeStmt: "write" expr •
   47 expr: expr • "+" term
   48     | expr • "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 32 (writeStmt)


State 61

   26 assignStmt: idents ":=" • expr

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    expr     go to state 81
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 62

   17 procDecl: "procedure" idents ";" • block

    $default  reduce using rule 12 (empty)

    block       go to state 82
    constDecls  go to state 3
    empty       go to state 4


State 63

   35 stmts: stmts ";" • stmt

    identsym  shift, and go to state 7
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "if"      shift, and go to state 24
    "while"   shift, and go to state 25
    "read"    shift, and go to state 26
    "write"   shift, and go to state 27
    "skip"    shift, and go to state 28

    idents      go to state 29
    stmt        go to state 83
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 64

   28 beginStmt: "begin" stmts "end" •

    $default  reduce using rule 28 (beginStmt)


State 65

   38 oddCondition: "odd" expr •
   47 expr: expr • "+" term
   48     | expr • "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 38 (oddCondition)


State 66

   47 expr: expr • "+" term
   48     | expr • "-" term
   54 factor: "(" expr • ")"

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69
    ")"  shift, and go to state 84


State 67

   29 ifStmt: "if" condition "then" • stmt "else" stmt

    identsym  shift, and go to state 7
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "if"      shift, and go to state 24
    "while"   shift, and go to state 25
    "read"    shift, and go to state 26
    "write"   shift, and go to state 27
    "skip"    shift, and go to state 28

    idents      go to state 29
    stmt        go to state 85
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 68

   47 expr: expr "+" • term

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    term     go to state 86
    factor   go to state 56
    posSign  go to state 57


State 69

   48 expr: expr "-" • term

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    term     go to state 87
    factor   go to state 56
    posSign  go to state 57


State 70

   40 relOp: "=" •

    $default  reduce using rule 40 (relOp)


State 71

   41 relOp: "<>" •

    $default  reduce using rule 41 (relOp)


State 72

   42 relOp: "<" •

    $default  reduce using rule 42 (relOp)


State 73

   43 relOp: "<=" •

    $default  reduce using rule 43 (relOp)


State 74

   44 relOp: ">" •

    $default  reduce using rule 44 (relOp)


State 75

   45 relOp: ">=" •

    $default  reduce using rule 45 (relOp)


State 76

   39 relOpCondition: expr relOp • expr

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    expr     go to state 88
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 77

   50 term: term "*" • factor

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    factor   go to state 89
    posSign  go to state 57


State 78

   51 term: term "/" • factor

    identsym  shift, and go to state 7
    "+"       shift, and go to state 45
    "-"       shift, and go to state 46
    "("       shift, and go to state 48

    $default  reduce using rule 12 (empty)

    idents   go to state 49
    empty    go to state 50
    factor   go to state 90
    posSign  go to state 57


State 79

   53 factor: posSign numbersym •

    $default  reduce using rule 53 (factor)


State 80

   30 whileStmt: "while" condition "do" • stmt

    identsym  shift, and go to state 7
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "if"      shift, and go to state 24
    "while"   shift, and go to state 25
    "read"    shift, and go to state 26
    "write"   shift, and go to state 27
    "skip"    shift, and go to state 28

    idents      go to state 29
    stmt        go to state 91
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 81

   26 assignStmt: idents ":=" expr •
   47 expr: expr • "+" term
   48     | expr • "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 26 (assignStmt)


State 82

   17 procDecl: "procedure" idents ";" block •

    $default  reduce using rule 17 (procDecl)


State 83

   35 stmts: stmts ";" stmt •

    $default  reduce using rule 35 (stmts)


State 84

   54 factor: "(" expr ")" •

    $default  reduce using rule 54 (factor)


State 85

   29 ifStmt: "if" condition "then" stmt • "else" stmt

    "else"  shift, and go to state 92


State 86

   47 expr: expr "+" term •
   50 term: term • "*" factor
   51     | term • "/" factor

    "*"  shift, and go to state 77
    "/"  shift, and go to state 78

    $default  reduce using rule 47 (expr)


State 87

   48 expr: expr "-" term •
   50 term: term • "*" factor
   51     | term • "/" factor

    "*"  shift, and go to state 77
    "/"  shift, and go to state 78

    $default  reduce using rule 48 (expr)


State 88

   39 relOpCondition: expr relOp expr •
   47 expr: expr • "+" term
   48     | expr • "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 39 (relOpCondition)


State 89

   50 term: term "*" factor •

    $default  reduce using rule 50 (term)


State 90

   51 term: term "/" factor •

    $default  reduce using rule 51 (term)


State 91

   30 whileStmt: "while" condition "do" stmt •

    $default  reduce using rule 30 (whileStmt)


State 92

   29 ifStmt: "if" condition "then" stmt "else" • stmt

    identsym  shift, and go to state 7
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "if"      shift, and go to state 24
    "while"   shift, and go to state 25
    "read"    shift, and go to state 26
    "write"   shift, and go to state 27
    "skip"    shift, and go to state 28

    idents      go to state 29
    stmt        go to state 93
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 93

   29 ifStmt: "if" condition "then" stmt "else" stmt •

    $default  reduce using rule 29 (ifStmt)
